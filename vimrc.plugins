" Vim File
"  Filename: vimrc
"   Created: 2016-04-20 00:31
"      Desc: Tony Xu's Vim Configuration
"                   _
"   __  __   __   _(_)_ __ ___
"   \ \/ /___\ \ / / | '_ ` _ \
"    >  <_____\ V /| | | | | | |
"   /_/\_\     \_/ |_|_| |_| |_|
"
"    Author: xutao(Tony Xu), hhktony@gmail.com
"   Company: myself

" Init {{{
scriptencoding utf-8
set nocompatible               " be iMproved
filetype off                   " required!

let g:xvim_version = '0.1'
" }}}

" Load Plugins {{{
call plug#begin('~/.vim/bundle')

Plug 'mhinz/vim-startify'
Plug 'tweekmonster/startuptime.vim', { 'on': 'StartupTime' }
" Plug 'vimcn/vimcdoc'
Plug 'Raimondi/delimitMate'
" Plug 'Valloric/MatchTagAlways'
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
" Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesToggle' } " TODO
Plug 'Yggdroot/indentLine'
Plug 'hhktony/molokai'
Plug 'w0ng/vim-hybrid'
Plug 'NLKNguyen/papercolor-theme'
Plug 'acarapetis/vim-colors-github'
" let g:hybrid_custom_term_colors = 1
" Plug 'yonchu/accelerated-smooth-scroll'
Plug 'schickling/vim-bufonly'
" Plug 'ap/vim-buftabline'
" Plug 'bling/vim-bufferline'
Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'rking/ag.vim'
Plug 'google/vim-searchindex'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" Plug 'bogado/file-line'
Plug 'hhktony/vim-authorinfo'
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

Plug 'scrooloose/nerdcommenter'
" Plug 'editorconfig/editorconfig-vim'

Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable', 'for': ['c', 'cpp'] }
if (!has('nvim') && v:version >= 800) || has('nvim-0.2.0')
  " Plug 'maralla/completor.vim'
  Plug 'w0rp/ale'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'vim-scripts/gtags.vim', { 'for': [ 'c', 'cpp' ] }
else
  Plug 'scrooloose/syntastic'
endif
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'tpope/vim-fugitive'
" Plug 'neoclide/vim-easygit'
" let g:easygit_enable_command = 1
Plug 'junegunn/gv.vim', { 'on': 'GV' }
Plug 'airblade/vim-gitgutter', { 'on': 'GitGutterSignsToggle' }
Plug 'octol/vim-cpp-enhanced-highlight', { 'for': [ 'c', 'cpp' ] }
" Plug 'python_match.vim', {'for': 'python'}
" Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }
" Plug 'dhruvasagar/vim-table-mode'
" Plug 'hotoo/pangu.vim', { 'for': 'markdown' }
Plug 'mboughaba/i3config.vim', { 'for': 'i3config' }
" Plug 'pearofducks/ansible-vim'
" Plug 'iamcco/dict.vim'
" Plug 'ianva/vim-youdao-translater'

call plug#end()
" }}}

" vim-startify {{{
let g:startify_custom_header=[
        \'                   _           ',
        \'   __  __   __   _(_)_ __ ___  ',
        \'   \ \/ /___\ \ / / | |_ ` _ \ ',
        \'    >  <_____\ V /| | | | | | |',
        \'   /_/\_\     \_/ |_|_| |_| |_|',
        \'            [ x-vim ' . g:xvim_version . ' ＠' . v:version . ' ]',
        \]
let g:startify_custom_footer=['', '    This configuration is maintained by Tony Xu <hhktony@gmail.com> and other contributors. Thanks!']
let g:startify_list_order = [
            \ ['   Recent Files:'],
            \ 'files',
            \ ['   Project:'],
            \ 'dir',
            \ ['   Sessions:'],
            \ 'sessions',
            \ ['   Bookmarks:'],
            \ 'bookmarks',
            \ ['   Commands:'],
            \ 'commands',
            \ ]
let g:startify_files_number = 5
" }}}

" vim-authorinfo {{{
if has_key(g:plugs, 'vim-authorinfo')
  let g:authorinfo_author  = 'xutao(Tony Xu)'
  let g:authorinfo_email   = 'hhktony@gmail.com'
  let g:authorinfo_company = 'myself'
endif
" }}}

" vim-gutentags {{{
if has_key(g:plugs, 'vim-gutentags')
  " let g:gutentags_trace = 1
  " let g:gutentags_debug = 1
  let g:gutentags_modules = []
  if executable('ctags')
    let g:gutentags_modules += ['ctags']
  endif
  if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
  endif
  " let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
  let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
  " let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
  " let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
  let g:gutentags_auto_add_gtags_cscope = 0
  let s:vim_tags = expand('~/.cache/tags')
  call EnsureExists(s:vim_tags)
  let g:gutentags_cache_dir = s:vim_tags
endif
" }}}

" gtags.vim {{{
if has_key(g:plugs, 'gtags.vim')
  augroup VimGtags
    autocmd!
    autocmd FileType c,cpp nnoremap <Leader>gd :Gtags <CR><CR>
    autocmd FileType c,cpp nnoremap <Leader>gr :Gtags -r<CR><CR>
  augroup END
endif
" }}}

" ag.vim {{{
" if executable('ag')
  " let g:ag_prg='ag --vimgrep --column'
  " nmap <Leader>a :tab split<CR>:Ag ""<left>
  " nmap <Leader>A :tab split<CR>:Ag <C-r><C-w><CR>
" endif
" }}}

" fzf.vim {{{
if has_key(g:plugs, 'fzf.vim')
  " let g:fzf_layout = { 'down': '~40%'  }
  " let g:fzf_command_prefix='Fzf'
  " if executable('ag')
    " let $FZF_DEFAULT_COMMAND = 'ag --hidden --path-to-ignore ' . s:ignore_file . ' -g ""'
  " endif
  " command! -bang -nargs=? -complete=dir Files
  "   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
  function! s:Root() abort
    let l:root = systemlist('git rev-parse --show-toplevel')[0]
    if v:shell_error
      let l:root = getcwd()
    endif
    return l:root
  endfunction

  let g:fzf_colors =  {
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment']
    \ }
  command! -bang -nargs=* Rg
        \ call fzf#vim#grep('rg --column --no-heading --line-number --color=always '.shellescape(<q-args>),
        \ 1,
        \ fzf#vim#with_preview({'dir': s:Root()}),
        \ <bang>0)

  command! -bang -nargs=* Ag
        \ call fzf#vim#grep('ag --nogroup --column --color '.shellescape(<q-args>),
        \ 1,
        \ fzf#vim#with_preview({'dir': s:Root()}),
        \ <bang>0)

  nnoremap <C-P> :<c-u>exe 'Files ' . <SID>Root()<CR>
  nnoremap <silent> <Leader>ff :<c-u>exe 'Files ' . <SID>Root()<CR>
  nnoremap <silent> <Leader>fb :Buffers<CR>
  nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>
  " nnoremap <silent> <Leader>AG :Ag <C-R><C-A><CR>
  " xnoremap <silent> <Leader>ag y:Ag <C-R>"<CR>
  imap <c-x><c-k> <plug>(fzf-complete-word)
  " imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-l> <plug>(fzf-complete-line)
endif
" }}}

" vim-airline {{{
if has('statusline')
  " let g:airline_section_c = '%f%m'
  let g:airline_symbols_ascii = 1
  " let g:airline_extensions = ['branch', 'tabline']
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod     = ':t' "显示短路径文件名
  let g:airline#extensions#tabline#enabled      = 1
  let g:airline#extensions#tabline#tab_nr_type  = 1
  " let g:airline#extensions#tabline#buffer_nr_show  = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '¦'

  for s:i in range(1, 9)
    execute 'nmap <Leader>' . s:i . ' <Plug>AirlineSelectTab' . s:i . '<CR>'
  endfor
endif
" }}}

" vim-buftabline {{{
" let g:buftabline_numbers = 1
" let g:buftabline_separators = 1
" let g:buftabline_indicators = 1
" hi! link BufTabLineFill StatusLine
" hi! link BufTabLineCurrent User2
" hi! link BufTabLineActive User2
" hi! link BufTabLineHidden User5
" }}}

" molokai {{{
" let g:molokai_original = 1
" let g:rehash256 = 1
let g:molokai_transparent = 1
" }}}

" vim-easy-align {{{
" vip<Leader>a
xmap <Leader>a <Plug>(EasyAlign)
" For motion/text object (eg: <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
" }}}

" delimitMate {{{
autocmd FileType * let b:delimitMate_autoclose = 1
autocmd FileType xml,html,xhtml let b:delimitMate_matchpairs ="(:),[:],{:}"
" }}}

" ultisnips {{{
if has_key(g:plugs, 'ultisnips')
  let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
  let g:UltiSnipsExpandTrigger = '<C-j>'
  let g:UltiSnipsJumpForwardTrigger = '<C-j>'
  let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
  " map <Leader>us :UltiSnipsEdit<CR>
endif
" }}}

" tagbar {{{
nmap <silent> <Leader>t :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 36
" set tags=./tags
" " Make tags placed in .git/tags file available in all levels of a repository
" let g:gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
" if g:gitroot !=# ''
"   let &tags = &tags . ',' . g:gitroot . '/tags'
" endif
" nmap <Leader>g :!uptags.sh<CR>
" }}}

" syntastic {{{
if has_key(g:plugs, 'syntastic')
  " let g:syntastic_auto_loc_list = 1
  " let g:syntastic_check_on_open = 1
  " let g:syntastic_auto_jump = 1
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_warning_symbol = 'w>'
  let g:syntastic_python_python_exec = 'python'
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_vim_checkers = ['vint']
  " let g:syntastic_python_flake8_args='--ignore=E501,E225,E129,E126'
  let g:syntastic_python_flake8_args='--ignore=E225,E126'

  nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
endif
" }}}

" ale {{{
if has_key(g:plugs, 'ale')
  let g:ale_linters = {
        \   'go': ['gometalinter', 'gofmt'],
        \   'python': ['flake8'],
        \   'sh': ['shellcheck'],
        \   'vim': ['vint']
        \}
  let g:ale_python_flake8_options='--ignore=E225,E126'
  " let g:ale_set_loclist = 0
  " let g:ale_set_quickfix = 1

  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = 'w>'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_c_parse_makefile = 1
  let g:ale_c_gcc_options = '-std=gnu99 -Wall -Wextra -Werror -fexceptions -I../include -I.'
  let g:ale_c_clang_options = '-std=gnu99 -Wall -Wextra -Werror -fexceptions -I../include -I. -DNDEBUG'

  " nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
  " nmap <silent> <Leader>en <Plug>(ale_next_wrap)

  nnoremap <silent> <Leader>ec :ALEToggle<CR>
  nmap ]e <Plug>(ale_next_wrap)
  nmap [e <Plug>(ale_previous_wrap)
endif
" }}}

" deoplete.nvim {{{
" if has_key(g:plugs, 'deoplete.nvim')
"   let g:deoplete#enable_at_startup = 1
"   let g:python_host_prog = '/home/tony/.pyenv/versions/2.7.10/envs/openstack/bin/python'
"   let g:deoplete#sources#jedi#show_docstring = 1
"   let g:deoplete#sources#jedi#enable_cache = 1
"   let g:deoplete#sources#jedi#worker_threads = 2
"
"   inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<Tab>"
"   inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"   inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"   inoremap <expr><BS> deoplete#smart_close_popup()."\<bs>"
"   inoremap <expr><cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
" endif
" }}}

" completor {{{
if has_key(g:plugs, 'completor.vim')
  let g:completor_python_binary = '/home/tony/.pyenv/versions/2.7.10/envs/openstack/bin/python'
  noremap <silent> <Leader>jd :call completor#do('definition')<CR>
  " noremap <silent> <leader>c :call completor#do('doc')<CR>
  " noremap <silent> <leader>f :call completor#do('format')<CR>
endif
" }}}

" YouCompleteMe {{{
if has_key(g:plugs, 'YouCompleteMe')
  " disable ycm's diagnostics first
  let g:ycm_enable_diagnostic_signs = 1
  let g:ycm_key_list_stop_completion = ['<CR>']
  let g:ycm_key_detailed_diagnostics = '<leader>yd'

  let g:ycm_autoclose_preview_window_after_completion = 1
  " let g:ycm_goto_buffer_command = 'vertical-split'
  let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
  " let g:ycm_server_use_vim_stdout = 1
  " let g:ycm_server_log_level = 'debug'
  " 两个字符以后自动弹出的是基于符号的补全（当前所有 buffer 中收集到的符号），非基于语义的补全
  " let g:ycm_min_num_of_chars_for_completion = 2
  let g:ycm_seed_identifiers_with_syntax = 1
  let g:ycm_complete_in_comments = 1
  " let g:ycm_collect_identifiers_from_comments_and_strings = 1
  let g:ycm_collect_identifiers_from_tags_files = 0
  let g:ycm_server_log_level='debug'
  " let g:ycm_key_list_select_completion = ['<C-n>', '<C-j>']
  " let g:ycm_key_list_previous_completion = ['<C-p>', '<C-k>']
  " let g:ycm_key_invoke_completion = '<c-z>'
  " noremap <c-z> <NOP>
  " 语义补全两个字符触发
  let g:ycm_semantic_triggers =  {
        \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
        \ 'cs,lua,javascript': ['re!\w{2}'],
        \ }
  " let g:ycm_filetype_whitelist = {
  "       \ 'c': 1,
  "       \ 'cpp': 1,
  "       \ 'objc': 1,
  "       \ 'sh': 1,
  "       \ 'zsh': 1,
  "       \ }
  let g:ycm_confirm_extra_conf = 1
  let g:ycm_extra_conf_vim_data  = [ '&filetype' ]
  " let g:ycm_server_python_interpreter = 'python'
  " let g:ycm_server_python_interpreter = '/home/tony/.pyenv/versions/2.7.10/envs/openstack/bin/python'
  " let g:ycm_python_binary_path = '/usr/bin/python'
  let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'

  augroup VimYcm
    autocmd!
    " Enable omni completion.
    " autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    " autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    " autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    " autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    " autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    " autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    " TODO
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

    autocmd FileType c,cpp,python nnoremap <silent> <Leader>jd :YcmCompleter GoTo<CR>
    autocmd FileType python nnoremap <silent> <Leader>K :YcmCompleter GetDoc<CR>
    " autocmd FileType c,cpp nnoremap <silent> <buffer> K  :YcmCompleter GetType<CR>
    autocmd FileType c,cpp nnoremap <buffer> K  :YcmCompleter GetType<CR>
    autocmd FileType c,cpp,python,rust,javascript,typescript
                \   nnoremap <Leader>gD :YcmCompleter GetDoc<CR>
  augroup END
endif
" }}}

" vim-go {{{
" /home/tony/.vim/bundle/vim-go/gosnippets/snippets/go.snip for ultisnips
if has_key(g:plugs, 'vim-go')
  let g:go_fmt_command = 'goimports'
  " let g:go_fmt_autosave = 0
  let g:go_def_mapping_enabled = 1
  " let g:go_info_mode = 'gocode'
  " let g:go_auto_type_info = 1
  " let g:go_guru_scope = []
  " let g:go_list_type = 'quickfix'
  " let g:go_decls_mode = 'ctrlp.vim' " fzf
  " let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']

  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_build_constraints = 1
  " let g:go_highlight_function_arguments = 1
  " let g:go_highlight_function_calls = 1
  augroup VimGo
    autocmd!
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    " autocmd FileType go nnoremap <Leader>d :GoDecls<CR>
    " autocmd FileType go nnoremap <Leader>d :GoDef<CR>
    autocmd FileType go nnoremap <Leader>gc :GoCallers<CR>
    autocmd FileType go nmap <Leader>r <Plug>(go-run)
    " autocmd FileType go nmap <Leader>b <Plug>(go-build)
    " autocmd FileType go nmap <Leader>t <Plug>(go-test)
    " autocmd FileType go nmap <Leader>c <Plug>(go-coverage)
    " autocmd FileType go nmap <Leader>ds <Plug>(go-def-split)
    " autocmd FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    " autocmd FileType go nmap <Leader>dt <Plug>(go-def-tab)
    " autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
    " autocmd FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    " autocmd FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    autocmd FileType go nmap <Leader>s <Plug>(go-implements)
    autocmd FileType go nmap <Leader>K <Plug>(go-info)
    " autocmd FileType go nnoremap <LocalLeader>i <Plug>(go-info)
    autocmd FileType go nmap <Leader>e <Plug>(go-rename)
  augroup END
endif
" }}}

" nerdcommenter {{{
" [n],cc n 行逐行添加注释(9,cc)
" [n],cu n 行逐行取消注释(9,cu)
" [n],cm n 行尝试添加块注释(9,cm)
" [n],cs n 行尝试添加美观的块注释(9,cm)
" ,ca 切换注释方式
" ,cA 在行尾插入注释符号并且进入插入模式。

let g:NERDCreateDefaultMappings = 0
" <C-/>添加去除注释
" https://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim
map <C-_> <plug>NERDCommenterInvert
let g:NERDSpaceDelims = 1           " 让注释符与语句之间留一个空格
let g:NERDCompactSexyComs = 1       " 多行注释时样子更好看
" }}}

" nerdtree {{{
if has_key(g:plugs, 'nerdtree')
  " :NERDtree       打开NERD_tree
  " :NERDtreeClose  关闭NERD_tree
  " o 打开关闭文件或者目录
  " t 在标签页中打开
  " T 在后台标签页中打开
  " ! 执行此文件
  " p/P 到上层目录
  " K/J 到第一个/最后一个节点
  " u 打开上层目录
  " r 刷新当前目录
  " R 递归刷新当前根目录
  " m 显示文件系统菜单 添加、删除、移动操作
  nmap <silent> <Leader>n :NERDTreeToggle<CR>
  " nmap <silent> <Leader>f :NERDTreeFind<CR>
  let g:NERDTreeShowLineNumbers     = 1
  let g:NERDTreeIgnore              = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
  " let g:NERDTreeQuitOnOpen          = 1   " 打开文件后, 关闭 NERDTrre 窗口
  " let g:NERDTreeWinSize             = 31
  " let g:NERDTreeWinPos              = 'right'
  " let g:NERDTreeHighlightCursorline = 1   " 高亮 NERDTrre 窗口的当前行
endif
" }}}

" indentLine {{{
if has_key(g:plugs, 'indentLine')
  let g:indentLine_enabled = 0
  let g:indentLine_color_term = 239
  " let g:indentLine_color_gui = '#616161'
  " let g:indentLine_bgcolor_term = 202
  nnoremap <silent> <Leader>l :IndentLinesToggle<CR>
endif
" }}}

" vim-gitgutter {{{
if has_key(g:plugs, 'vim-gitgutter')
  nmap <silent> <Leader>gn :GitGutterSignsToggle<CR>
endif
" }}}

" vim-markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}

" vim-fugitive {{{
" if has_key(g:plugs, 'vim-fugitive')
  " nnoremap <Leader>d :Gdiff<CR>
  " nnoremap <silent> <Leader>gs :Gstatus<CR>
  " nnoremap <silent> <Leader>gd :Gdiff<CR>
  " nnoremap <silent> <Leader>gc :Gcommit<CR>
  " nnoremap <silent> <Leader>gb :Gblame<CR>
  " nnoremap <silent> <Leader>gl :Glog<CR>
  " nnoremap <silent> <Leader>gp :Git push<CR>
  " nnoremap <silent> <Leader>gw :Gwrite<CR>:GitGutter<CR>
" endif
" }}}

" DoxygenToolkit.vim {{{
" highlight the doxygen comments
" set syntax=cpp.doxygen
" let g:load_doxygen_syntax=1
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_authorName        = "xutao hhktony@gmail.com"
" let g:DoxygenToolkit_versionString     = "1.0"
" let g:DoxygenToolkit_briefTag_funcName = "yes"
" let g:doxygen_enhanced_color=1

" autocmd FileType c,cpp nmap dx :Dox<CR>
" autocmd FileType c,cpp nmap da :DoxAut<CR>
" autocmd FileType c,cpp nmap dl :DoxLic<CR>
" autocmd BufNewFile *.{h,hpp,c,cpp,cc} DoxAuthor
" }}}

" vim: set et sw=2 ts=2 sts=2 tw=78 fmr={{{,}}} fdl=0 fdm=marker:
