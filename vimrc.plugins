scriptencoding utf-8
set nocompatible               " be iMproved
filetype off                   " required!

let g:xvim_version = '0.1'

if !exists('g:x_plugin_groups')
  let g:x_plugin_groups=['general', 'programming',
                        \'go', 'python', 'ruby', 'html']
endif

" Load Plugins {{{
call plug#begin('~/.vim/bundle')

if count(g:x_plugin_groups, 'general')
  Plug 'mhinz/vim-startify'
  Plug 'vimcn/vimcdoc'
  Plug 'Raimondi/delimitMate'
  " Plug 'tpope/vim-repeat'
  Plug 'sjl/gundo.vim'
  Plug 'easymotion/vim-easymotion'
  Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
  " Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } | Plug 'Xuyuanp/nerdtree-git-plugin'
  " Plug 'terryma/vim-multiple-cursors'
  Plug 'vim-airline/vim-airline'
  " Plug 'vim-airline/vim-airline-themes'
  Plug 'hhktony/molokai'
  Plug 'acarapetis/vim-colors-github'
  Plug 'rking/ag.vim'
  Plug 'kien/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'
  Plug 'dyng/ctrlsf.vim'
  " Plug 'bogado/file-line'
endif

if count(g:x_plugin_groups, 'programming')
  Plug 'hhktony/vim-authorinfo'
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  Plug 'junegunn/vim-easy-align'
  Plug 'scrooloose/nerdcommenter'
  if v:version >= 800
    Plug 'maralla/completor.vim'
    Plug 'w0rp/ale'
  else
    Plug 'scrooloose/syntastic'
    " Plug 'Valloric/YouCompleteMe'
    " Plug '~/.vim/bundle/YouCompleteMe'
    " Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py --clang-completer'}
    " Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
  endif
  Plug 'majutsushi/tagbar'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
endif

" Plug 'python_match.vim', {'for': 'python'}

" Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'fatih/vim-go', { 'for': 'go' }

Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails',   {'for': ['ruby', 'eruby'] }

Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }

Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'mzlogin/vim-markdown-toc', {'for': 'markdown'}
Plug 'iamcco/markdown-preview.vim', {'for': 'markdown'}
Plug 'hotoo/pangu.vim', {'for': 'markdown'}

call plug#end()
" }}}

" vim-startify {{{
let g:startify_custom_header=[
        \'                   _           ',
        \'   __  __   __   _(_)_ __ ___  ',
        \'   \ \/ /___\ \ / / | |_ ` _ \ ',
        \'    >  <_____\ V /| | | | | | |',
        \'   /_/\_\     \_/ |_|_| |_| |_|',
        \'            [ x-vim ' . g:xvim_version . ' ＠' . v:version . ' ]',
        \]
let g:startify_custom_footer=['', '    This configuration is maintained by Tony Xu <hhktony@gmail.com> and other contributors. Thanks!']
let g:startify_list_order = [
            \ ['   Recent Files:'],
            \ 'files',
            \ ['   Project:'],
            \ 'dir',
            \ ['   Sessions:'],
            \ 'sessions',
            \ ['   Bookmarks:'],
            \ 'bookmarks',
            \ ['   Commands:'],
            \ 'commands',
            \ ]
let g:startify_files_number = 5
" }}}

" vim-authorinfo {{{
  let g:authorinfo_author  = 'xutao(Tony Xu)'
  let g:authorinfo_email   = 'hhktony@gmail.com'
  let g:authorinfo_company = 'myself'
" }}}

" ag.vim {{{
if executable('ag')
  let g:ag_prg='ag --vimgrep --column'
  nmap <leader>a :tab split<CR>:Ag ""<left>
  nmap <leader>A :tab split<CR>:Ag <C-r><C-w><CR>
endif
" }}}

" ctrlp.vim {{{
" if isdirectory(expand('~/.vim/bundle/ctrlp.vim/'))
if has_key(g:plugs, 'ctrlp.vim')
  " nmap <leader>b :CtrlPBuffer<CR>
  " nmap <leader>t :CtrlP<CR>
  if executable('ag')
    let g:ctrlp_user_command = 'ag %s --hidden -i -g "" '
    let g:ctrlp_use_caching = 0
  endif
  nmap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
  let g:ctrlp_open_multiple_files = 'v'
  let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn)$',
        \ 'file': '\v\.(log|jpg|png|jpeg|o|a|so|pyc|pyo)$',
        \ }
endif
" }}}

" ctrlsf {{{
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
      \ 'open'  : '<Space>',
      \ 'openb' : 'O',
      \ 'tab'   : 't',
      \ 'tabb'  : 'T',
      \ 'prevw' : 'p',
      \ 'quit'  : 'q',
      \ 'next'  : '<C-J>',
      \ 'prev'  : '<C-K>',
      \ 'pquit' : 'q',
      \ }
" }}}

" ctrlp-funky {{{
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
" }}}

" vim-airline {{{
if has('statusline')
  " let g:airline_section_c = '%f%m'
  let g:airline_symbols_ascii = 1
  " let g:airline_extensions = ['branch', 'tabline']
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod     = ':t' "显示短路径文件名
  let g:airline#extensions#tabline#enabled      = 1
  let g:airline#extensions#tabline#tab_nr_type  = 1
  " let g:airline#extensions#tabline#buffer_nr_show  = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '¦'
  nmap <Leader>1 <Plug>AirlineSelectTab1
  nmap <Leader>2 <Plug>AirlineSelectTab2
  nmap <Leader>3 <Plug>AirlineSelectTab3
  nmap <Leader>4 <Plug>AirlineSelectTab4
  nmap <Leader>5 <Plug>AirlineSelectTab5
  nmap <Leader>6 <Plug>AirlineSelectTab6
  nmap <Leader>7 <Plug>AirlineSelectTab7
  nmap <Leader>8 <Plug>AirlineSelectTab8
  nmap <Leader>9 <Plug>AirlineSelectTab9
endif
" }}}

" molokai {{{
" let g:molokai_original = 1
" let g:rehash256 = 1
" }}}

" vim-easy-align {{{
vnoremap <silent> <Leader>a :EasyAlign<Enter>
" }}}

" delimitMate {{{
au FileType * let b:delimitMate_autoclose = 1
au FileType xml,html,xhtml let b:delimitMate_matchpairs ="(:),[:],{:}"
" }}}

" ultisnips {{{
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger       = '<C-j>'
let g:UltiSnipsJumpForwardTrigger  = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
" map <leader>us :UltiSnipsEdit<CR>
" }}}

" tagbar {{{
nmap <Leader>t :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 36
set tags=./tags
" Make tags placed in .git/tags file available in all levels of a repository
let g:gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
if g:gitroot !=# ''
  let &tags = &tags . ',' . g:gitroot . '/tags'
endif
nmap <Leader>g :!uptags.sh<CR>
" }}}

" syntastic {{{
if has_key(g:plugs, 'syntastic')
  " let g:syntastic_auto_loc_list = 1
  " let g:syntastic_check_on_open = 1
  " let g:syntastic_auto_jump = 1
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_warning_symbol = 'w>'
  let g:syntastic_python_python_exec = 'python'
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_vim_checkers = ['vint']
  " let g:syntastic_python_flake8_args='--ignore=E501,E225,E129,E126'
  let g:syntastic_python_flake8_args='--ignore=E225,E126'

  nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
endif
" }}}

" ale {{{
if has_key(g:plugs, 'ale')
  let g:ale_linters = {
        \   'python': ['flake8'],
        \   'sh': ['shellcheck'],
        \   'vim': ['vint'],
        \}
  let g:ale_python_flake8_args='--ignore=E225,E126'

  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = 'w>'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  " nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
  " nmap <silent> <Leader>en <Plug>(ale_next_wrap)

  nnoremap <silent> <Leader>ec :ALEToggle<CR>
endif
" }}}

" completor {{{
if has_key(g:plugs, 'completor.vim')
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <CR> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
endif
" }}}

" YouCompleteMe {{{
let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_goto_buffer_command = 'vertical-split'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_c_conf.py'
" let g:ycm_server_use_vim_stdout = 1
" let g:ycm_server_log_level = 'debug'
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_strings = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_complete_in_comments = 1
" let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_confirm_extra_conf = 0

" let g:ycm_python_binary_path = '/usr/bin/python'
" let g:ycm_python_binary_path = '/usr/bin/python3'

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

nnoremap <silent> <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" }}}

" Go {{{
" /home/tony/.vim/bundle/vim-go/gosnippets/snippets/go.snip for ultisnips
  if has_key(g:plugs, 'vim-go')
    let g:go_fmt_command = 'goimports'
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_build_constraints = 1
    augroup VimGo
      autocmd FileType go nmap <buffer> <LocalLeader>d :GoDef<CR>
      autocmd FileType go nmap <buffer> <LocalLeader>u :GoCallers<CR>
      autocmd FileType go nmap <LocalLeader>r <Plug>(go-run)
      autocmd FileType go nmap <LocalLeader>b <Plug>(go-build)
      autocmd FileType go nmap <LocalLeader>t <Plug>(go-test)
      " autocmd FileType go nmap <LocalLeader>c <Plug>(go-coverage)
      " autocmd FileType go nmap <LocalLeader>ds <Plug>(go-def-split)
      " autocmd FileType go nmap <LocalLeader>dv <Plug>(go-def-vertical)
      " autocmd FileType go nmap <LocalLeader>dt <Plug>(go-def-tab)
      " autocmd FileType go nmap <LocalLeader>gd <Plug>(go-doc)
      " autocmd FileType go nmap <LocalLeader>gv <Plug>(go-doc-vertical)
      " autocmd FileType go nmap <LocalLeader>gb <Plug>(go-doc-browser)
      " autocmd FileType go nmap <LocalLeader>s <Plug>(go-implements)
      " autocmd FileType go nmap <LocalLeader>i <Plug>(go-info)
      " autocmd FileType go nmap <LocalLeader>e <Plug>(go-rename)
    augroup END
  endif
" }}}

" Ruby {{{
  if count(g:x_plugin_groups, 'ruby')
    let g:rubycomplete_buffer_loading = 1
    let g:rubycomplete_classes_in_global = 1
  endif
" }}}

" nerdcommenter {{{
" [n],cc n 行逐行添加注释(9,cc)
" [n],cu n 行逐行取消注释(9,cu)
" [n],cm n 行尝试添加块注释(9,cm)
" [n],cs n 行尝试添加美观的块注释(9,cm)
" ,ca 切换注释方式
" ,cA 在行尾插入注释符号并且进入插入模式。

" <C-/>添加去除注释
" https://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim
map <C-_> <plug>NERDCommenterInvert
" let NERDCreateDefaultMappings=0
let NERDSpaceDelims = 1           " 让注释符与语句之间留一个空格
let NERDCompactSexyComs = 1       " 多行注释时样子更好看
" }}}

" nerdtree {{{
if has_key(g:plugs, 'nerdtree')
  " :NERDtree        打开NERD_tree
  " :NERDtreeClose  关闭NERD_tree
  " o 打开关闭文件或者目录
  " t 在标签页中打开
  " T 在后台标签页中打开
  " ! 执行此文件
  " p/P 到上层目录
  " K/J 到第一个/最后一个节点
  " u 打开上层目录
  " r 刷新当前目录
  " R 递归刷新当前根目录
  " m 显示文件系统菜单 添加、删除、移动操作
  nmap <silent> <Leader>n :NERDTreeToggle<CR>
  " nmap <silent> <Leader>f :NERDTreeFind<CR>
  let g:NERDSpaceDelims=1
  let NERDTreeShowLineNumbers     = 1
  let NERDTreeIgnore              = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
  let NERDTreeWinpos              = 'left'
  let NERDTreeQuitOnOpen          = 1     " 打开文件后, 关闭NERDTrre窗口
  let NERDTreeWinSize             = 31    " 设置窗口大小
  let NERDTreeHighlightCursorline = 1   " 高亮NERDTrre窗口的当前行
endif
" }}}

" vim-gitgutter {{{
  nmap <silent> <Leader>gn :GitGutterSignsToggle<CR>
" }}}

" vim-markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}

" vim-fugitive {{{
nnoremap <Leader>d :Gdiff<CR>
" nnoremap <silent> <Leader>gs :Gstatus<CR>
" nnoremap <silent> <Leader>gd :Gdiff<CR>
" nnoremap <silent> <Leader>gc :Gcommit<CR>
" nnoremap <silent> <Leader>gb :Gblame<CR>
" nnoremap <silent> <Leader>gl :Glog<CR>
" nnoremap <silent> <Leader>gp :Git push<CR>
" nnoremap <silent> <Leader>gw :Gwrite<CR>:GitGutter<CR>
" }}}

" vim-multiple-cursors {{{
" let g:multi_cursor_use_default_mapping=0
" Default mapping
" let g:multi_cursor_next_key='<C-m>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
" let g:multi_cursor_quit_key='<Esc>'
" }}}

" gundo {{{
" noremap <leader>h :GundoToggle<CR>
" }}}

" DoxygenToolkit.vim {{{
" highlight the doxygen comments
" set syntax=cpp.doxygen
" let g:load_doxygen_syntax=1
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_authorName        = "xutao hhktony@gmail.com"
" let g:DoxygenToolkit_versionString     = "1.0"
" let g:DoxygenToolkit_briefTag_funcName = "yes"
" let g:doxygen_enhanced_color=1

" autocmd FileType c,cpp nmap dx :Dox<CR>
" autocmd FileType c,cpp nmap da :DoxAut<CR>
" autocmd FileType c,cpp nmap dl :DoxLic<CR>
" autocmd BufNewFile *.{h,hpp,c,cpp,cc} DoxAuthor
" }}}

" vim: set et sw=2 ts=2 sts=2 tw=78 fmr={{{,}}} fdl=0 fdm=marker:
