" Vim File
"  Filename: vimrc
"   Created: 2016-04-20 00:31
"      Desc: Tony Xu's Vim Configuration
"                   _
"   __  __   __   _(_)_ __ ___
"   \ \/ /___\ \ / / | '_ ` _ \
"    >  <_____\ V /| | | | | | |
"   /_/\_\     \_/ |_|_| |_| |_|
"
"    Author: xutao(Tony Xu), hhktony@gmail.com
"   Company: myself

" Init {{{
scriptencoding utf-8
set nocompatible               " be iMproved
filetype off                   " required!
" }}}

" Load Plugins {{{
call plug#begin('~/.vim/bundle')

Plug 'mhinz/vim-startify'
Plug 'hhktony/molokai'
Plug 'NLKNguyen/papercolor-theme'
Plug 'acarapetis/vim-colors-github'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'

Plug 'schickling/vim-bufonly'
Plug 'vim-airline/vim-airline'
Plug 'google/vim-searchindex'
" set shortmess-=S
" Plug 'romainl/vim-cool'
" let g:cool_total_matches = 1
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

Plug 'preservim/nerdcommenter', { 'on': '<Plug>NERDCommenterToggle' }
Plug 'hhktony/vim-authorinfo'
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'honza/vim-snippets'
" Plug 'haya14busa/vim-asterisk'

if v:version >= 800
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'w0rp/ale'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'vim-scripts/gtags.vim', { 'for': [ 'c', 'cpp' ] }
  " Plug 'fatih/vim-go', { 'for': 'go' }
endif
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
" Plug 'Chiel92/vim-autoformat'
" Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'liuchengxu/vista.vim'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim', { 'on': 'GV' }
Plug 'airblade/vim-gitgutter', { 'on': 'GitGutterSignsToggle' }
Plug 'posva/vim-vue', { 'for': ['vue'] }
Plug 'hotoo/pangu.vim',  { 'for': ['markdown', 'vimwiki', 'text'] }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
let g:vim_markdown_folding_disabled = 1
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' }
" Plug 'mboughaba/i3config.vim', { 'for': 'i3config' }
Plug 'pearofducks/ansible-vim', { 'for': 'yaml.ansible' }
" Plug 'voldikss/vim-translator'
" nmap <silent> <Leader>ts <Plug>Translate
" vmap <silent> <Leader>ts <Plug>TranslateV
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

Plug 'tweekmonster/startuptime.vim', { 'on': 'StartupTime' }
if !has('nvim')
    Plug 'rhysd/vim-healthcheck'
endif

call plug#end()
" }}}

" vim-startify {{{
let g:startify_custom_header=[
      \'                   _           ',
      \'   __  __   __   _(_)_ __ ___  ',
      \'   \ \/ /___\ \ / / | |_ ` _ \ ',
      \'    >  <_____\ V /| | | | | | |',
      \'   /_/\_\     \_/ |_|_| |_| |_|',
      \'            [ x-vim ' . g:xvim_version . ' ＠' . v:version . ' ]',
      \]
let g:startify_custom_footer=['', '    This configuration is maintained by Tony Xu <hhktony@gmail.com> and other contributors. Thanks!']
let g:startify_list_order = [
      \ ['   Recent Files:'],
      \ 'files',
      \ ['   Project:'],
      \ 'dir',
      \ ['   Sessions:'],
      \ 'sessions',
      \ ['   Bookmarks:'],
      \ 'bookmarks',
      \ ['   Commands:'],
      \ 'commands',
      \ ]
let g:startify_files_number = 5
" }}}

" vim-authorinfo {{{
if has_key(g:plugs, 'vim-authorinfo')
  let g:authorinfo_author  = 'xutao(Tony Xu)'
  let g:authorinfo_email   = 'hhktony@gmail.com'
  let g:authorinfo_company = 'myself'
endif
" }}}

" vim-doge {{{
if has_key(g:plugs, 'vim-doge')
  let g:doge_enable_mappings = 0
endif
" }}}

" vim-gutentags {{{
if has_key(g:plugs, 'vim-gutentags')
  " let g:gutentags_trace = 1
  " let g:gutentags_debug = 1
  let g:gutentags_modules = []
  if executable('ctags')
    let g:gutentags_modules += ['ctags']
  endif
  if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
  endif
  " let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
  let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
  " let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
  " let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
  let g:gutentags_ctags_exclude = ['*.json', '*.js', '*.ts', '*.jsx', '*.css', '*.less', '*.sass', '*.dart', 'node_modules', 'dist', 'vendor', 'tests', 'bundle']
  let g:gutentags_auto_add_gtags_cscope = 0
  let s:vim_tags = expand('~/.cache/tags')
  call EnsureExists(s:vim_tags)
  let g:gutentags_cache_dir = s:vim_tags
endif
" }}}

" gtags.vim {{{
if has_key(g:plugs, 'gtags.vim')
  augroup VimGtags
    autocmd!
    autocmd FileType c,cpp nnoremap <Leader>gd :Gtags <CR><CR>
    autocmd FileType c,cpp nnoremap <Leader>gr :Gtags -r<CR><CR>
  augroup END
endif
" }}}

" fzf.vim {{{
if has_key(g:plugs, 'fzf.vim')
  let $FZF_DEFAULT_OPTS .= ' --no-mouse --inline-info'
  " let g:fzf_layout = { 'down': '~40%' }
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Todo', 'border': 'rounded' } }
  " let g:fzf_command_prefix='Fzf'
  " if executable('ag')
  " let $FZF_DEFAULT_COMMAND = 'ag --hidden --path-to-ignore ' . s:ignore_file . ' -g ""'
  " endif
  " command! -bang -nargs=? -complete=dir Files
  "   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
  function! s:Root() abort
    let l:root = systemlist('git rev-parse --show-toplevel')[0]
    if v:shell_error
      let l:root = getcwd()
    endif
    return l:root
  endfunction

  " let g:fzf_colors =  {
  "   \ 'fg':      ['fg', 'Normal'],
  "   \ 'bg':      ['bg', 'Normal'],
  "   \ 'hl':      ['fg', 'Comment'],
  "   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  "   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  "   \ 'hl+':     ['fg', 'Statement'],
  "   \ 'info':    ['fg', 'PreProc'],
  "   \ 'border':  ['fg', 'Ignore'],
  "   \ 'prompt':  ['fg', 'Conditional'],
  "   \ 'pointer': ['fg', 'Exception'],
  "   \ 'marker':  ['fg', 'Keyword'],
  "   \ 'spinner': ['fg', 'Label'],
  "   \ 'header':  ['fg', 'Comment']
  "   \ }

  " TODO
  " command! -bang -nargs=* Rg
  "       \ call fzf#vim#grep('rg --column --no-heading --line-number --color=always '.shellescape(<q-args>),
  "       \ 1,
  "       \ fzf#vim#with_preview({'dir': s:Root()}),
  "       \ <bang>0 ? fzf#vim#with_preview('up:60%') : {},
  "       \ <bang>0)

  " let s:ag_options = ' --skip-vcs-ignores -A 10'
  let s:ag_options = ''
  command! -bang -nargs=* Ag
        \ call fzf#vim#ag(
        \ <q-args>,
        \ s:ag_options,
        \ <bang>0 ? fzf#vim#with_preview({'dir': s:Root()}, 'up:60%')
        \         : fzf#vim#with_preview({'dir': s:Root()}, 'right:50%', '?'),
        \ <bang>0)

  command! -bang -nargs=* AC
        \ call fzf#vim#ag(
        \ <q-args>,
        \ s:ag_options,
        \ fzf#vim#with_preview({'dir': '~/.cheat/'}, 'up:60%'),
        \ <bang>1)

  command! -bang Files call fzf#vim#files(s:Root(), <bang>0)
  " nnoremap <C-P> :<c-u>exe 'Files ' . <SID>Root()<CR>
  nnoremap <silent> <C-P> :Files<CR>
  " nnoremap <silent> <Leader>ff :<c-u>exe 'Files ' . <SID>Root()<CR>
  nnoremap <silent> <Leader>fb :Buffers<CR>
  nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>
  nnoremap <silent> <Leader>AG :Ag! <C-R><C-W><CR>
  imap <c-x><c-k> <plug>(fzf-complete-word)
  " imap <c-x><c-f> <plug>(fzf-complete-path)
  " imap <c-x><c-l> <plug>(fzf-complete-line)
  imap <c-x><c-l> <plug>(fzf-complete-buffer-line)
  " Buffers][ Jump to the existing window if possible
  " let g:fzf_buffers_jump = 1
endif
" }}}

" vim-airline {{{
if has('statusline')
  " let g:airline_section_c = '%f%m'
  " let g:airline_extensions = []
  " let g:airline_theme='minimalist'
  let g:airline#extensions#tabline#enabled = 0
  let g:airline_symbols_ascii = 1
  " let g:airline_extensions = ['branch', 'tabline']
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod     = ':t' "显示短路径文件名
  let g:airline#extensions#tabline#enabled      = 1
  let g:airline#extensions#tabline#tab_nr_type  = 1
  " let g:airline#extensions#tabline#buffer_nr_show  = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '¦'

  for s:i in range(1, 9)
    execute 'nmap <Leader>' . s:i . ' <Plug>AirlineSelectTab' . s:i . '<CR>'
  endfor
endif
" }}}

" vim-buftabline {{{
" let g:buftabline_numbers = 1
" let g:buftabline_separators = 1
" let g:buftabline_indicators = 1
" hi! link BufTabLineFill StatusLine
" hi! link BufTabLineCurrent User2
" hi! link BufTabLineActive User2
" hi! link BufTabLineHidden User5
" }}}

" molokai {{{
" let g:molokai_original = 1
" let g:rehash256 = 1
let g:molokai_transparent = 1
" }}}

" vim-easy-align {{{
" vip<Leader>a
xmap <Leader>a <Plug>(EasyAlign)
" For motion/text object (eg: <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
" }}}

" vim-asterisk {{{
if has_key(g:plugs, 'vim-asterisk')
  map *   <Plug>(asterisk-g*)
  map g*  <Plug>(asterisk-*)
  map #   <Plug>(asterisk-g#)
  map g#  <Plug>(asterisk-#)

  map z*  <Plug>(asterisk-z*)
  map gz* <Plug>(asterisk-gz*)
  map z#  <Plug>(asterisk-z#)
  map gz# <Plug>(asterisk-gz#)
endif
" }}}

" ultisnips {{{
if has_key(g:plugs, 'ultisnips')
  let g:UltiSnipsSnippetsDir = '~/.vim/ultisnips'
  let g:UltiSnipsExpandTrigger = '<C-j>'
  let g:UltiSnipsJumpForwardTrigger = '<C-j>'
  let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
  " map <Leader>us :UltiSnipsEdit<CR>
endif
" }}}

" tagbar {{{
nmap <silent> <Leader>t :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 36
" set tags=./tags
" " Make tags placed in .git/tags file available in all levels of a repository
" let g:gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
" if g:gitroot !=# ''
"   let &tags = &tags . ',' . g:gitroot . '/tags'
" endif
" nmap <Leader>g :!uptags.sh<CR>
" }}}

" vista.vim {{{
if has_key(g:plugs, 'vista.vim')
  nnoremap <silent> <Leader>t :<C-u>Vista!!<CR>

  " Executive used when opening vista sidebar without specifying it.
  " See all the avaliable executives via `:echo g:vista#executives`.
  let g:vista_default_executive = 'ctags'

  " Set the executive for some filetypes explicitly. Use the explicit executive
  " instead of the default one for these filetypes when using `:Vista` without
  " specifying the executive.
    let g:vista_echo_cursor_strategy = 'scroll'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ }

  " To enable fzf's preview window set g:vista_fzf_preview.
  " The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
  " For example:
  let g:vista_fzf_preview = ['right:50%']
endif
" }}}

" ale {{{
if has_key(g:plugs, 'ale')
  let g:ale_linters = {
        \   'go': ['gometalinter', 'gofmt'],
        \   'python': ['ruff'],
        \   'sh': ['shellcheck'],
        \   'vim': ['vint']
        \}
  let g:ale_sh_shell_default_shell = 'bash'

  let g:ale_fixers = {
  \   'python': ['yapf', 'isort'],
  \ }

  " let g:ale_set_loclist = 0
  " let g:ale_set_quickfix = 1

  let g:ale_fix_on_save = 0
  let g:ale_sign_column_always = 0 " 一般需要实时检查，默认关闭
  let g:ale_lint_on_save = 1 " save file auto check
  let g:ale_lint_on_text_changed = 0 " for ale_lint_on_save = 1
  let g:ale_lint_on_enter = 0 " for ale_lint_on_save = 1

  " 在 linux/mac 下降低语法检查程序的进程优先级（不要卡到前台进程）
  if !has('win32') == 0
    let g:ale_command_wrapper = 'nice -n5'
  endif

  let g:ale_completion_delay = 500
  let g:ale_echo_delay = 20
  let g:ale_lint_delay = 500
  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = 'w>'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_c_parse_makefile = 1
  let g:ale_c_gcc_options = '-std=gnu99 -Wall -Wextra -Werror -fexceptions -I../include -I.'
  let g:ale_c_clang_options = '-std=gnu99 -Wall -Wextra -Werror -fexceptions -I../include -I. -DNDEBUG'
  let g:ale_python_flake8_options='--ignore=E225,E126'

  " nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
  " nmap <silent> <Leader>en <Plug>(ale_next_wrap)

  nnoremap <silent> <Leader>ec :ALEToggle<CR>
  nmap ]e <Plug>(ale_next_wrap)
  nmap [e <Plug>(ale_previous_wrap)
endif
" }}}

" coc.nvim {{{
if has_key(g:plugs, 'coc.nvim')
  " let g:coc_snippet_next = '<TAB>'
  " let g:coc_snippet_prev = '<S-TAB>'
  " let g:coc_status_error_sign = '•'
  " let g:coc_status_warning_sign = '•'
  let g:coc_global_extensions = [
        \ 'coc-marketplace',
        \ 'coc-lists',
        \ 'coc-explorer',
        \ 'coc-json',
        \ 'coc-yaml',
        \ 'coc-toml',
        \ 'coc-prettier',
        \ 'coc-snippets',
        \ 'coc-pairs',
        \ 'coc-git',
        \ 'coc-java',
        \ 'coc-pyright@1.1.345']
        " \ 'coc-pyright@1.1.280']

  nmap <silent> gC <Plug>(coc-git-commit)

  nmap <silent> [c <Plug>(coc-git-prevconflict)
  nmap <silent> ]c <Plug>(coc-git-nextconflict)

  " Use K to show documentation in preview window.
  " nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  " nmap <silent> [g <Plug>(coc-diagnostic-prev)
  " nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> <Leader>gd <Plug>(coc-definition)
  nmap <silent> <Leader>gy <Plug>(coc-type-definition)
  nmap <silent> <Leader>gi <Plug>(coc-implementation)
  nmap <silent> <Leader>gr <Plug>(coc-references)
  " nmap <silent> ga <Plug>(coc-codeaction-cursor)

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)
  " Remap keys for refactor code actions.
  nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
  xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
  " nnoremap <silent> <Leader>aw  :exe 'CocList -A -I --normal --input='.expand('<cword>').' words -w'<CR>

  nnoremap <silent> <Leader>cc :<C-u>CocList commands<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <Leader>ce :<C-u>CocList extensions<cr>
  command! -nargs=0 Format      :call     CocAction('format')
  command! -nargs=0 Prettier    :CocCommand prettier.formatFile
  " Add `:Fold` command to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)
  " Add `:OR` command for organize imports of the current buffer
  command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

  " Formatting selected code.
  nmap <leader>f <Plug>(coc-format-selected)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf <Plug>(coc-fix-current)

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice.
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif
endif
" }}}

" vim-go {{{
" /home/tony/.vim/bundle/vim-go/gosnippets/snippets/go.snip for ultisnips
if has_key(g:plugs, 'vim-go')
  let g:go_fmt_command = 'goimports'
  let g:go_fmt_autosave = 0
  " let g:go_fmt_autosave = 0
  " let g:go_auto_type_info = 1
  " let g:go_guru_scope = []
  " let g:go_list_type = 'quickfix'
  " let g:go_decls_mode = 'ctrlp.vim' " fzf
  " let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
  " let g:go_debug = ['lsp']
  " let g:go_gopls_enabled = 0
  " let g:go_info_mode = 'gocode'
  " let g:go_def_mode = 'godef'
  " let g:go_list_autoclose = 1

  " disable vim-go :GoDef short cut (gd)
  " this is handled by LanguageClient [LC]
  let g:go_def_mapping_enabled = 1

  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_build_constraints = 1
  " let g:go_highlight_function_arguments = 1
  " let g:go_highlight_function_calls = 1
  augroup VimGo
    autocmd!
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    " autocmd FileType go nnoremap <Leader>d :GoDecls<CR>
    " autocmd FileType go nnoremap <Leader>d :GoDef<CR>
    autocmd FileType go nnoremap <Leader>gc :GoCallers<CR>
    autocmd FileType go nmap <Leader>r <Plug>(go-run)
    " autocmd FileType go nmap <Leader>b <Plug>(go-build)
    " autocmd FileType go nmap <Leader>t <Plug>(go-test)
    " autocmd FileType go nmap <Leader>c <Plug>(go-coverage)
    " autocmd FileType go nmap <Leader>ds <Plug>(go-def-split)
    " autocmd FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    " autocmd FileType go nmap <Leader>dt <Plug>(go-def-tab)
    " autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
    " autocmd FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    " autocmd FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    autocmd FileType go nmap <Leader>s <Plug>(go-implements)
    autocmd FileType go nmap <Leader>K <Plug>(go-info)
    " autocmd FileType go nnoremap <LocalLeader>i <Plug>(go-info)
    autocmd FileType go nmap <Leader>e <Plug>(go-rename)
  augroup END
endif
" }}}

" nerdcommenter {{{
" [n],cc n 行逐行添加注释(9,cc)
" [n],cu n 行逐行取消注释(9,cu)
" [n],cm n 行尝试添加块注释(9,cm)
" [n],cs n 行尝试添加美观的块注释(9,cm)
" ,ca 切换注释方式
" ,cA 在行尾插入注释符号并且进入插入模式。

let g:NERDCreateDefaultMappings = 0
" <C-/>添加去除注释
" https://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim
map <C-_> <plug>NERDCommenterToggle
let g:NERDSpaceDelims = 1           " 让注释符与语句之间留一个空格
let g:NERDCustomDelimiters = {
      \ 'python': { 'left': '#', 'right': '' }
      \ }
let g:NERDCompactSexyComs = 1       " 多行注释时样子更好看
" }}}

" nerdtree {{{
if has_key(g:plugs, 'nerdtree')
  " :NERDtree       打开NERD_tree
  " :NERDtreeClose  关闭NERD_tree
  " o 打开关闭文件或者目录
  " t 在标签页中打开
  " T 在后台标签页中打开
  " ! 执行此文件
  " p/P 到上层目录
  " K/J 到第一个/最后一个节点
  " u 打开上层目录
  " r 刷新当前目录
  " R 递归刷新当前根目录
  " m 显示文件系统菜单 添加、删除、移动操作
  nmap <silent> <Leader>n :NERDTreeToggle<CR>
  " nmap <silent> <Leader>f :NERDTreeFind<CR>
  let g:NERDTreeShowLineNumbers     = 1
  let g:NERDTreeIgnore              = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
  " let g:NERDTreeQuitOnOpen          = 1   " 打开文件后, 关闭 NERDTrre 窗口
  " let g:NERDTreeWinSize             = 31
  " let g:NERDTreeWinPos              = 'right'
  " let g:NERDTreeHighlightCursorline = 1   " 高亮 NERDTrre 窗口的当前行
endif
" }}}

" indentLine {{{
if has_key(g:plugs, 'indentLine')
  let g:indentLine_enabled = 0
  let g:indentLine_color_term = 239
  " let g:indentLine_color_gui = '#616161'
  " let g:indentLine_bgcolor_term = 202
  nnoremap <silent> <Leader>l :IndentLinesToggle<CR>
endif
" }}}

" vim-gitgutter {{{
if has_key(g:plugs, 'vim-gitgutter')
  nmap <silent> <Leader>gn :GitGutterSignsToggle<CR>
endif
" }}}

" vim-fugitive {{{
if has_key(g:plugs, 'vim-fugitive')
  " nnoremap <Leader>d :Gdiff<CR>
  " nnoremap <silent> <Leader>gs :Gstatus<CR>
  " nnoremap <silent> <Leader>gd :Gdiff<CR>
  " nnoremap <silent> <Leader>gc :Gcommit<CR>
  nnoremap <silent> <Leader>gb :Git blame<CR>
  " nnoremap <silent> <Leader>gl :Glog<CR>
  " nnoremap <silent> <Leader>gp :Git push<CR>
  " nnoremap <silent> <Leader>gw :Gwrite<CR>:GitGutter<CR>
endif
" }}}

" vim-markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}

" goyo.vim + limelight.vim {{{
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = '#777777'
let g:limelight_paragraph_span = 2
let g:limelight_priority = -1

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
  Limelight
  let &l:statusline = '%M'
  hi StatusLine ctermfg=red guifg=red cterm=NONE gui=NONE
endfunction

function! s:goyo_leave()
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
  Limelight!
endfunction

" autocmd! User GoyoEnter nested call <SID>goyo_enter()
" autocmd! User GoyoLeave nested call <SID>goyo_leave()

nnoremap <Leader>G :Goyo<CR>
" }}}

" vim: set et sw=2 ts=2 sts=2 tw=78 fmr={{{,}}} fdl=0 fdm=marker:
